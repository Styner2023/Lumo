diff --git a/source/blender/nodes/geometry/nodes/node_geo_extrude_mesh.cc b/source/blender/nodes/geometry/nodes/node_geo_extrude_mesh.cc
index 0072fbcde93..4448612553a 100644
--- a/source/blender/nodes/geometry/nodes/node_geo_extrude_mesh.cc
+++ b/source/blender/nodes/geometry/nodes/node_geo_extrude_mesh.cc
@@ -27,6 +27,8 @@ static void node_declare(NodeDeclarationBuilder &b)
   b.add_input<decl::Vector>(N_("Offset")).subtype(PROP_TRANSLATION).implicit_field().hide_value();
   b.add_input<decl::Float>(N_("Offset Scale")).default_value(1.0f).supports_field();
   b.add_input<decl::Bool>(N_("Individual")).default_value(true);
+  b.add_input<decl::Bool>(N_("Conic")).default_value(false);
+  b.add_input<decl::Vector>(N_("Origin")).subtype(PROP_TRANSLATION).implicit_field().hide_value();
   b.add_output<decl::Geometry>("Mesh");
   b.add_output<decl::Bool>(N_("Top")).field_source();
   b.add_output<decl::Bool>(N_("Side")).field_source();
@@ -208,6 +210,23 @@ void copy_with_mixing(MutableSpan<T> dst, Span<T> src, GetMixIndicesFn get_mix_i
   });
 }
 
+/* will offset a vertex in the direction formed by the vertex and an origin point
+the direction length come from offset*/
+static void offset_mesh_vertex_from_origin_point(float vertex[3],
+                                                 const float offset[3],
+                                                 const float origin[3])
+{
+  // direction
+  float dir[3];
+  copy_v3_v3(dir, vertex);
+  sub_v3_v3(dir, origin);
+  normalize_v3(dir);
+  // new offset : dir * len
+  mul_v3_fl(dir, len_v3(offset));
+  // add new offset to vertex
+  add_v3_v3(vertex, dir);
+}
+
 static Array<Vector<int>> create_vert_to_edge_map(const int vert_size,
                                                   Span<MEdge> edges,
                                                   const int vert_offset = 0)
@@ -223,7 +242,9 @@ static Array<Vector<int>> create_vert_to_edge_map(const int vert_size,
 static void extrude_mesh_vertices(MeshComponent &component,
                                   const Field<bool> &selection_field,
                                   const Field<float3> &offset_field,
-                                  const AttributeOutputs &attribute_outputs)
+                                  const AttributeOutputs &attribute_outputs,
+                                  const bool &use_conic_field,
+                                  const float3 &origin_field)
 {
   Mesh &mesh = *component.get_for_write();
   const int orig_vert_size = mesh.totvert;
@@ -282,15 +303,30 @@ static void extrude_mesh_vertices(MeshComponent &component,
     attribute.save();
     return true;
   });
-
-  devirtualize_varray(offsets, [&](const auto offsets) {
-    threading::parallel_for(selection.index_range(), 1024, [&](const IndexRange range) {
-      for (const int i : range) {
-        const float3 offset = offsets[selection[i]];
-        add_v3_v3(new_verts[i].co, offset);
-      }
+  if (use_conic_field) {
+    float org[3] = {origin_field.x, origin_field.y, origin_field.z};
+    /* we repeat block for avoid insertion of a condition in loob for avoid braing of
+    parralelisation */
+    devirtualize_varray(offsets, [&](const auto offsets) {
+      threading::parallel_for(selection.index_range(), 1024, [&](const IndexRange range) {
+        for (const int i : range) {
+          const float3 offset = offsets[selection[i]];
+          offset_mesh_vertex_from_origin_point(new_verts[i].co, offset, org);
+        }
+      });
     });
-  });
+  }
+  else {
+    devirtualize_varray(offsets, [&](const auto offsets) {
+      threading::parallel_for(selection.index_range(), 1024, [&](const IndexRange range) {
+        for (const int i : range) {
+          const float3 offset = offsets[selection[i]];
+          add_v3_v3(new_verts[i].co, offset);
+        }
+      });
+    });
+  }
+  
 
   if (attribute_outputs.top_id) {
     save_selection_as_attribute(
@@ -379,7 +415,9 @@ static VectorSet<int> vert_indices_from_edges(const Mesh &mesh, const Span<T> ed
 static void extrude_mesh_edges(MeshComponent &component,
                                const Field<bool> &selection_field,
                                const Field<float3> &offset_field,
-                               const AttributeOutputs &attribute_outputs)
+                               const AttributeOutputs &attribute_outputs,
+                               const bool &use_conic_field,
+                               const float3 &origin_field)
 {
   Mesh &mesh = *component.get_for_write();
   const int orig_vert_size = mesh.totvert;
@@ -599,20 +637,44 @@ static void extrude_mesh_edges(MeshComponent &component,
     return true;
   });
 
-  if (edge_offsets.is_single()) {
-    const float3 offset = edge_offsets.get_internal_single();
-    threading::parallel_for(new_verts.index_range(), 1024, [&](const IndexRange range) {
-      for (const int i : range) {
-        add_v3_v3(new_verts[i].co, offset);
-      }
-    });
+  if (use_conic_field) {
+    float org[3] = {origin_field.x, origin_field.y, origin_field.z};
+    /* we repeat block for avoid insertion of a condition in loob for avoid braing of
+    parralelisation */
+
+    if (edge_offsets.is_single()) {
+      const float3 offset = edge_offsets.get_internal_single();
+      threading::parallel_for(new_verts.index_range(), 1024, [&](const IndexRange range) {
+        for (const int i : range) {
+          offset_mesh_vertex_from_origin_point(new_verts[i].co, offset, org);
+        }
+      });
+    }
+    else {
+      threading::parallel_for(new_verts.index_range(), 1024, [&](const IndexRange range) {
+        for (const int i : range) {
+          offset_mesh_vertex_from_origin_point(
+              new_verts[i].co, vert_offsets[new_vert_indices[i]], org);
+        }
+      });
+    }
   }
   else {
-    threading::parallel_for(new_verts.index_range(), 1024, [&](const IndexRange range) {
-      for (const int i : range) {
-        add_v3_v3(new_verts[i].co, vert_offsets[new_vert_indices[i]]);
-      }
-    });
+    if (edge_offsets.is_single()) {
+      const float3 offset = edge_offsets.get_internal_single();
+      threading::parallel_for(new_verts.index_range(), 1024, [&](const IndexRange range) {
+        for (const int i : range) {
+          add_v3_v3(new_verts[i].co, offset);
+        }
+      });
+    }
+    else {
+      threading::parallel_for(new_verts.index_range(), 1024, [&](const IndexRange range) {
+        for (const int i : range) {
+          add_v3_v3(new_verts[i].co, vert_offsets[new_vert_indices[i]]);
+        }
+      });
+    }
   }
 
   if (attribute_outputs.top_id) {
@@ -627,14 +689,16 @@ static void extrude_mesh_edges(MeshComponent &component,
   BKE_mesh_runtime_clear_cache(&mesh);
 }
 
-/**
+ /**
  * Edges connected to one selected face are on the boundary of a region and will be duplicated into
  * a "side face". Edges inside a region will be duplicated to leave any original faces unchanged.
  */
 static void extrude_mesh_face_regions(MeshComponent &component,
                                       const Field<bool> &selection_field,
                                       const Field<float3> &offset_field,
-                                      const AttributeOutputs &attribute_outputs)
+                                      const AttributeOutputs &attribute_outputs,
+                                      const bool &use_conic_field,
+                                      const float3 &origin_field)
 {
   Mesh &mesh = *component.get_for_write();
   const int orig_vert_size = mesh.totvert;
@@ -658,6 +722,10 @@ static void extrude_mesh_face_regions(MeshComponent &component,
     poly_selection_array[i_poly] = true;
   }
 
+  if (use_conic_field) {
+    float org[3] = {origin_field.x, origin_field.y, origin_field.z};
+  }
+
   /* Mix the offsets from the face domain to the vertex domain. Evaluate on the face domain above
    * in order to be consistent with the selection, and to use the face normals rather than vertex
    * normals as an offset, for example. */
@@ -957,31 +1025,66 @@ static void extrude_mesh_face_regions(MeshComponent &component,
     return true;
   });
 
-  /* Translate vertices based on the offset. If the vertex is used by a selected edge, it will
-   * have been duplicated and only the new vertex should use the offset. Otherwise the vertex might
-   * still need an offset, but it was reused on the inside of a region of extruded faces. */
-  if (poly_offsets.is_single()) {
-    const float3 offset = poly_offsets.get_internal_single();
-    threading::parallel_for(
-        IndexRange(all_selected_verts.size()), 1024, [&](const IndexRange range) {
-          for (const int i_orig : all_selected_verts.as_span().slice(range)) {
-            const int i_new = new_vert_indices.index_of_try(i_orig);
-            MVert &vert = mesh_verts(mesh)[(i_new == -1) ? i_orig : new_vert_range[i_new]];
-            add_v3_v3(vert.co, offset);
-          }
-        });
+  if (use_conic_field) {
+    float org[3] = {origin_field.x, origin_field.y, origin_field.z};
+    // we repeat block for avoid insertion of a condition in loob for avoid braing of parralelisation
+
+    /* Translate vertices based on the offset. If the vertex is used by a selected edge, it
+     * will have been duplicated and only the new vertex should use the offset. Otherwise the
+     * vertex might still need an offset, but it was reused on the inside of a region of
+     * extruded faces. */
+    if (poly_offsets.is_single()) {
+      const float3 offset = poly_offsets.get_internal_single();
+      threading::parallel_for(
+          IndexRange(all_selected_verts.size()), 1024, [&](const IndexRange range) {
+            for (const int i_orig : all_selected_verts.as_span().slice(range)) {
+              const int i_new = new_vert_indices.index_of_try(i_orig);
+              MVert &vert = mesh_verts(mesh)[(i_new == -1) ? i_orig : new_vert_range[i_new]];
+              offset_mesh_vertex_from_origin_point(vert.co, offset, org);
+            }
+          });
+    }
+    else {
+      threading::parallel_for(
+          IndexRange(all_selected_verts.size()), 1024, [&](const IndexRange range) {
+            for (const int i_orig : all_selected_verts.as_span().slice(range)) {
+              const int i_new = new_vert_indices.index_of_try(i_orig);
+              const float3 offset = vert_offsets[i_orig];
+              MVert &vert = mesh_verts(mesh)[(i_new == -1) ? i_orig : new_vert_range[i_new]];
+              offset_mesh_vertex_from_origin_point(vert.co, offset, org);
+            }
+          });
+    }  
   }
   else {
-    threading::parallel_for(
-        IndexRange(all_selected_verts.size()), 1024, [&](const IndexRange range) {
-          for (const int i_orig : all_selected_verts.as_span().slice(range)) {
-            const int i_new = new_vert_indices.index_of_try(i_orig);
-            const float3 offset = vert_offsets[i_orig];
-            MVert &vert = mesh_verts(mesh)[(i_new == -1) ? i_orig : new_vert_range[i_new]];
-            add_v3_v3(vert.co, offset);
-          }
-        });
+    /* Translate vertices based on the offset. If the vertex is used by a selected edge, it will
+     * have been duplicated and only the new vertex should use the offset. Otherwise the vertex
+     * might still need an offset, but it was reused on the inside of a region of extruded faces.
+     */
+    if (poly_offsets.is_single()) {
+      const float3 offset = poly_offsets.get_internal_single();
+      threading::parallel_for(
+          IndexRange(all_selected_verts.size()), 1024, [&](const IndexRange range) {
+            for (const int i_orig : all_selected_verts.as_span().slice(range)) {
+              const int i_new = new_vert_indices.index_of_try(i_orig);
+              MVert &vert = mesh_verts(mesh)[(i_new == -1) ? i_orig : new_vert_range[i_new]];
+              add_v3_v3(vert.co, offset);
+            }
+          });
+    }
+    else {
+      threading::parallel_for(
+          IndexRange(all_selected_verts.size()), 1024, [&](const IndexRange range) {
+            for (const int i_orig : all_selected_verts.as_span().slice(range)) {
+              const int i_new = new_vert_indices.index_of_try(i_orig);
+              const float3 offset = vert_offsets[i_orig];
+              MVert &vert = mesh_verts(mesh)[(i_new == -1) ? i_orig : new_vert_range[i_new]];
+              add_v3_v3(vert.co, offset);
+            }
+          });
+    }
   }
+  
 
   if (attribute_outputs.top_id) {
     save_selection_as_attribute(
@@ -1006,7 +1109,9 @@ static IndexRange selected_corner_range(Span<int> offsets, const int index)
 static void extrude_individual_mesh_faces(MeshComponent &component,
                                           const Field<bool> &selection_field,
                                           const Field<float3> &offset_field,
-                                          const AttributeOutputs &attribute_outputs)
+                                          const AttributeOutputs &attribute_outputs,
+                                          const bool &use_conic_field,
+                                          const float3 &origin_field)
 {
   Mesh &mesh = *component.get_for_write();
   const int orig_vert_size = mesh.totvert;
@@ -1222,16 +1327,34 @@ static void extrude_individual_mesh_faces(MeshComponent &component,
     return true;
   });
 
-  /* Offset the new vertices. */
-  threading::parallel_for(poly_selection.index_range(), 1024, [&](const IndexRange range) {
-    for (const int i_selection : range) {
-      const IndexRange poly_corner_range = selected_corner_range(index_offsets, i_selection);
-      for (MVert &vert : new_verts.slice(poly_corner_range)) {
-        add_v3_v3(vert.co, poly_offset[poly_selection[i_selection]]);
+  if (use_conic_field) {
+    float org[3] = {origin_field.x, origin_field.y, origin_field.z};
+    /* we repeat block for avoid insertion of a condition in loob for avoid braing of
+    parralelisation */
+    
+    /* Offset the new vertices. */
+    threading::parallel_for(poly_selection.index_range(), 1024, [&](const IndexRange range) {
+      for (const int i_selection : range) {
+        const IndexRange poly_corner_range = selected_corner_range(index_offsets, i_selection);
+        for (MVert &vert : new_verts.slice(poly_corner_range)) {
+          offset_mesh_vertex_from_origin_point(
+              vert.co, poly_offset[poly_selection[i_selection]], org);
+        }
       }
-    }
-  });
-
+    });
+  }
+  else {
+    /* Offset the new vertices. */
+    threading::parallel_for(poly_selection.index_range(), 1024, [&](const IndexRange range) {
+      for (const int i_selection : range) {
+        const IndexRange poly_corner_range = selected_corner_range(index_offsets, i_selection);
+        for (MVert &vert : new_verts.slice(poly_corner_range)) {
+          add_v3_v3(vert.co, poly_offset[poly_selection[i_selection]]);
+        }
+      }
+    });
+  }
+  
   /* Finally update each extruded polygon's loops to point to the new edges and vertices.
    * This must be done last, because they were used to find original indices for attribute
    * interpolation before. Alternatively an original index array could be built for each domain. */
@@ -1266,7 +1389,9 @@ static void node_geo_exec(GeoNodeExecParams params)
 {
   GeometrySet geometry_set = params.extract_input<GeometrySet>("Mesh");
   Field<bool> selection = params.extract_input<Field<bool>>("Selection");
+  const bool use_conic_field = params.extract_input<bool>("Conic");
   Field<float3> offset_field = params.extract_input<Field<float3>>("Offset");
+  const float3 origin_field = params.extract_input<float3>("Origin");
   Field<float> scale_field = params.extract_input<Field<float>>("Offset Scale");
   const NodeGeometryExtrudeMesh &storage = node_storage(params.node());
   GeometryNodeExtrudeMeshMode mode = static_cast<GeometryNodeExtrudeMeshMode>(storage.mode);
@@ -1295,17 +1420,37 @@ static void node_geo_exec(GeoNodeExecParams params)
       MeshComponent &component = geometry_set.get_component_for_write<MeshComponent>();
       switch (mode) {
         case GEO_NODE_EXTRUDE_MESH_VERTICES:
-          extrude_mesh_vertices(component, selection, final_offset, attribute_outputs);
+          extrude_mesh_vertices(component,
+                                selection,
+                                final_offset,
+                                attribute_outputs,
+                                use_conic_field,
+                                origin_field);
           break;
         case GEO_NODE_EXTRUDE_MESH_EDGES:
-          extrude_mesh_edges(component, selection, final_offset, attribute_outputs);
+          extrude_mesh_edges(component,
+                             selection,
+                             final_offset,
+                             attribute_outputs,
+                             use_conic_field,
+                             origin_field);
           break;
         case GEO_NODE_EXTRUDE_MESH_FACES: {
           if (extrude_individual) {
-            extrude_individual_mesh_faces(component, selection, final_offset, attribute_outputs);
+            extrude_individual_mesh_faces(component,
+                                          selection,
+                                          final_offset,
+                                          attribute_outputs,
+                                          use_conic_field,
+                                          origin_field);
           }
           else {
-            extrude_mesh_face_regions(component, selection, final_offset, attribute_outputs);
+            extrude_mesh_face_regions(component,
+                                      selection,
+                                      final_offset,
+                                      attribute_outputs,
+                                      use_conic_field,
+                                      origin_field);
           }
           break;
         }
