cmake_minimum_required(VERSION 3.1)

set(PROJECT TracyProfiler)

enable_language(C CXX)

project(
	${PROJECT} 
	VERSION ${PROJECT_VER} 
	LANGUAGES CXX)

set(LLVM_USE_CRT_DEBUG MDd CACHE STRING "" FORCE)
set(LLVM_USE_CRT_MINSIZEREL MD CACHE STRING "" FORCE)
set(LLVM_USE_CRT_RELEASE MD CACHE STRING "" FORCE)
set(LLVM_USE_CRT_RELWITHDEBINFO MD CACHE STRING "" FORCE)
set(USE_MSVC_RUNTIME_LIBRARY_DLL ON CACHE BOOL "")

## for group smake targets in the dir cmakeTargets
set_property(GLOBAL PROPERTY USE_FOLDERS ON)
set_property(GLOBAL PROPERTY PREDEFINED_TARGETS_FOLDER "cmakeTargets")

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

## some defines for debug mode (before 3rdparty.cmake)
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -D_DEBUG")

## some defines for debug mode (before 3rdparty.cmake)
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -D_DEBUG")

set(FINAL_BIN_DIR ${CMAKE_BINARY_DIR}/../bin)
set(CMAKE_INSTALL_PREFIX "${FINAL_BIN_DIR}")

if(NOT CMAKE_DEBUG_POSTFIX)
  set(CMAKE_DEBUG_POSTFIX _debug)
endif()

add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/capstone)

file(GLOB PROJECT_SRC_FILES
		${CMAKE_CURRENT_SOURCE_DIR}/src/*.*)
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR}/src PREFIX src FILES ${PROJECT_SRC_FILES})
list(REMOVE_ITEM PROJECT_SRC_FILES "${CMAKE_CURRENT_SOURCE_DIR}/src/BackendWayland.cpp")

file(GLOB PROJECT_SRC_FONT_FILES
		${CMAKE_CURRENT_SOURCE_DIR}/src/font/*.*)
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR}/src PREFIX src FILES ${PROJECT_SRC_FONT_FILES})

file(GLOB PROJECT_SRC_IMGUI_FILES
		${CMAKE_CURRENT_SOURCE_DIR}/src/imgui/*.*)
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR}/src PREFIX src FILES ${PROJECT_SRC_IMGUI_FILES})

file(GLOB PROJECT_NFD_FILES
		${CMAKE_CURRENT_SOURCE_DIR}/../nfd/nfd.h
		${CMAKE_CURRENT_SOURCE_DIR}/../nfd/nfd_win.cpp)
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR}/../nfd PREFIX nfd FILES ${PROJECT_NFD_FILES})

file(GLOB_RECURSE PROJECT_ZSTD_FILES
		${CMAKE_CURRENT_SOURCE_DIR}/../zstd/*.*)
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR}/../zstd PREFIX zstd FILES ${PROJECT_ZSTD_FILES})

file(GLOB_RECURSE PROJECT_IMGUI_FILES
		${CMAKE_CURRENT_SOURCE_DIR}/../imgui/*.*)
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR}/../imgui PREFIX imgui FILES ${PROJECT_IMGUI_FILES})

file(GLOB_RECURSE PROJECT_COMMON_FILES
		${CMAKE_CURRENT_SOURCE_DIR}/../public/common/*.*)
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR}/../public/common PREFIX common FILES ${PROJECT_COMMON_FILES})

file(GLOB_RECURSE PROJECT_SERVER_FILES
		${CMAKE_CURRENT_SOURCE_DIR}/../server/*.*)
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR}/../server PREFIX server FILES ${PROJECT_SERVER_FILES})

add_compile_definitions(${PROJECT} PRIVATE NOMINMAX)
add_compile_definitions(${PROJECT} PRIVATE _USE_MATH_DEFINES)
add_compile_definitions(${PROJECT} PRIVATE WIN32_LEAN_AND_MEAN)
add_compile_definitions(${PROJECT} PRIVATE IMGUI_ENABLE_FREETYPE)
add_compile_definitions(${PROJECT} PRIVATE _CRT_SECURE_NO_DEPRECATE)
add_compile_definitions(${PROJECT} PRIVATE _CRT_NONSTDC_NO_DEPRECATE)

add_executable(${PROJECT}
	${PROJECT_SRC_FILES}
	${PROJECT_NFD_FILES}
	${PROJECT_ZSTD_FILES}
	${PROJECT_IMGUI_FILES}
	${PROJECT_COMMON_FILES}
	${PROJECT_SERVER_FILES}
	${PROJECT_SRC_FONT_FILES}
	${PROJECT_SRC_IMGUI_FILES}
)

target_include_directories(${PROJECT} PRIVATE
	${CMAKE_CURRENT_SOURCE_DIR}
	${CMAKE_CURRENT_SOURCE_DIR}/../imgui
	${CMAKE_CURRENT_SOURCE_DIR}/capstone/include/capstone
)

message("GLFW_LIBRARIES : ${GLFW_LIBRARIES}")
message("FREETYPE_LIBRARIES : ${FREETYPE_LIBRARIES}")
message("IMGUIPACK_LIBRARIES : ${IMGUIPACK_LIBRARIES}")

target_link_libraries(${PROJECT}
	Ws2_32
	freetype
	capstone
	${GLFW_LIBRARIES}
)

if ("${CMAKE_EXE_LINKER_FLAGS}" STREQUAL "/machine:x64")
	set(ARCH x64)
else()
	set(ARCH x32)
endif()

set(${PROJECT}_Output_Name "${PROJECT}_${CMAKE_SYSTEM_NAME}$<$<CONFIG:Debug>:_Debug>$<$<CONFIG:Release>:_Release>$<$<CONFIG:MinSizeRel>:_MinSizeRel>$<$<CONFIG:RelWithDebInfo>:_RelWithDebInfo>_${ARCH}")
set_target_properties(${PROJECT} PROPERTIES	OUTPUT_NAME "${${PROJECT}_Output_Name}")
set_target_properties(${PROJECT} PROPERTIES	RUNTIME_OUTPUT_DIRECTORY "${FINAL_BIN_DIR}")
set_target_properties(${PROJECT} PROPERTIES	RUNTIME_OUTPUT_DIRECTORY_DEBUG "${FINAL_BIN_DIR}")
set_target_properties(${PROJECT} PROPERTIES	RUNTIME_OUTPUT_DIRECTORY_RELEASE "${FINAL_BIN_DIR}")

set_target_properties(capstone PROPERTIES FOLDER 3rdparty/tracy)
set_target_properties(capstone PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${FINAL_BIN_DIR}")
set_target_properties(capstone PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG "${FINAL_BIN_DIR}")
set_target_properties(capstone PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE "${FINAL_BIN_DIR}")